//
// Generated by JTB 1.3.2
//

package Visitors;

import Utils.*;
import IR.syntaxtree.*;
import java.util.Enumeration;
import IR.visitor.GJDepthFirst;
import java.util.Map;
import java.util.List;
import java.util.LinkedList;

/**
 * Provides default methods which visit each node in the tree in depth-first order. Your visitors
 * may extend this class.
 */
public class TranslationVisitor extends GJDepthFirst<SparrowVCode, FunctionSymbol> {
  private IdVisitor idVisitor;
  private Map<String, FunctionSymbol> functionMap;
  private LineCounter lineCounter;

  public TranslationVisitor(Map<String, FunctionSymbol> functionMap) {
    this.functionMap = functionMap;
    idVisitor = new IdVisitor();
    lineCounter = new LineCounter();
  }

  //
  // Auto class visitors--probably don't need to be overridden.
  //
  public SparrowVCode visit(NodeList n, FunctionSymbol context) {
    SparrowVCode stmt = new SparrowVCode();
    int _count = 0;
    for (Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
      SparrowVCode res = e.nextElement().accept(this, context);
      if (res != null) {
        stmt.AddBlockStmt(res);
        if (!res.Params().isEmpty()) {
          for (String param : res.Params()) {
            stmt.AddParam(param);
          }
        }
      }
      _count++;
    }
    return stmt;
  }

  public SparrowVCode visit(NodeListOptional n, FunctionSymbol context) {
    if (n.present()) {
      SparrowVCode stmt = new SparrowVCode();
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
        SparrowVCode res = e.nextElement().accept(this, context);
        if (res != null) {
          stmt.AddBlockStmt(res);
          if (!res.Params().isEmpty()) {
            for (String param : res.Params()) {
              stmt.AddParam(param);
            }
          }
        }
        _count++;
      }
      return stmt;
    } else return null;
  }

  public SparrowVCode visit(NodeOptional n, FunctionSymbol context) {
    if (n.present()) return n.node.accept(this, context);
    else return null;
  }

  public SparrowVCode visit(NodeSequence n, FunctionSymbol context) {
    SparrowVCode stmt = new SparrowVCode();
    int _count = 0;
    for (Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
      SparrowVCode res = e.nextElement().accept(this, context);
      if (res != null) {
        stmt.AddBlockStmt(res);
        if (!res.Params().isEmpty()) {
          for (String param : res.Params()) {
            stmt.AddParam(param);
          }
        }
      }
      _count++;
    }
    return stmt;
  }

  public SparrowVCode visit(NodeToken n, FunctionSymbol context) {
    return null;
  }

  //
  // User-generated visitor methods below
  //

  /**
   * f0 -> ( FunctionDeclaration() )*
   * f1 -> <EOF>
   */
  public SparrowVCode visit(Program n, FunctionSymbol context) {
    return n.f0.accept(this, context);
  }

  /**
   * f0 -> "func"
   * f1 -> FunctionName()
   * f2 -> "("
   * f3 -> ( Identifier() )*
   * f4 -> ")"
   * f5 -> Block()
   */
  public SparrowVCode visit(FunctionDeclaration n, FunctionSymbol context) {
    String funcName = n.f1.accept(idVisitor);
    SparrowVCode func = new SparrowVCode();
    context = functionMap.get(funcName);
    func.AddFuncLabelStmt(funcName);
    // SparrowVCode params = n.f3.accept(this, context);
    // if (params != null) {
    //   func.AddFuncLabelStmt(funcName, params.Params());
    // } else {
    //   func.AddFuncLabelStmt(funcName);
    // }
    SparrowVCode block = n.f5.accept(this, context);
    if (block != null) {
      func.AddBlockStmt(block);
    }

    return func;
  }

  /**
   * f0 -> ( Instruction() )*
   * f1 -> "return"
   * f2 -> Identifier()
   */
  public SparrowVCode visit(Block n, FunctionSymbol context) {
    SparrowVCode body = n.f0.accept(this, context);
    String retId = n.f2.accept(idVisitor);
    String retReg = context.Register(retId);
    if (retReg == null) {
      // retReg = n.f2.accept(idVisitor);
      retReg = "s9";
    }

    if (body == null) {
      body = new SparrowVCode();
    }

    body.AddAssignStmt(retId, retReg);
    body.AddReturnStmt(retId);
    return body;
  }

  /**
   * f0 -> LabelWithColon()
   *     | SetInteger()
   *     | SetFuncName()
   *     | Add()
   *     | Subtract()
   *     | Multiply()
   *     | LessThan()
   *     | Load()
   *     | Store()
   *     | Move()
   *     | Alloc()
   *     | Print()
   *     | ErrorMessage()
   *     | Goto()
   *     | IfGoto()
   *     | Call()
   */
  public SparrowVCode visit(Instruction n, FunctionSymbol context) {
    lineCounter.IncrementLineNumber();
    return n.f0.accept(this, context);
  }

  /**
   * f0 -> Label()
   * f1 -> ":"
   */
  public SparrowVCode visit(LabelWithColon n, FunctionSymbol context) {
    SparrowVCode stmt = new SparrowVCode();
    stmt.AddLabelStmt(n.f0.accept(idVisitor));
    return stmt;
  }

  /**
   * f0 -> Identifier()
   * f1 -> "="
   * f2 -> IntegerLiteral()
   */
  public SparrowVCode visit(SetInteger n, FunctionSymbol context) {
    String regId = n.f0.accept(idVisitor);
    String reg = context.Register(regId);
    String intLit = n.f2.accept(idVisitor);
    SparrowVCode stmt = new SparrowVCode();
    if (reg == null) {
      reg = "s9";
      stmt.AddAssignStmt(reg, intLit);
      stmt.AddAssignStmt(regId, reg);
      return stmt;
    }

    stmt.AddAssignStmt(reg, intLit);
    return stmt;
  }

  /**
   * f0 -> Identifier()
   * f1 -> "="
   * f2 -> "@"
   * f3 -> FunctionName()
   */
  public SparrowVCode visit(SetFuncName n, FunctionSymbol context) {
    String resId = n.f0.accept(idVisitor);
    String resReg = context.Register(resId);
    String funcId = n.f3.accept(idVisitor);
    SparrowVCode stmt = new SparrowVCode();
    if (resReg == null) {
      resReg = "s9";
      stmt.AddFuncAssignStmt(resReg, funcId);
      stmt.AddAssignStmt(resId, resReg);
      return stmt;
    }

    stmt.AddFuncAssignStmt(resReg, funcId);
    return stmt;
  }

  /**
   * f0 -> Identifier()
   * f1 -> "="
   * f2 -> Identifier()
   * f3 -> "+"
   * f4 -> Identifier()
   */
  public SparrowVCode visit(Add n, FunctionSymbol context) {
    String resId = n.f0.accept(idVisitor);
    String resReg = context.Register(resId);
    String lhsId = n.f2.accept(idVisitor);
    String lhsReg = context.Register(lhsId);
    String rhsId = n.f4.accept(idVisitor);
    String rhsReg = context.Register(rhsId);
    SparrowVCode stmt = new SparrowVCode();
    if (lhsReg == null) {
      lhsReg = "s9";
      stmt.AddAssignStmt(lhsReg, lhsId);
    }
    if (rhsReg == null) {
      rhsReg = "s10";
      stmt.AddAssignStmt(rhsReg, rhsId);
    }
    if (resReg == null) {
      resReg = "s11";
      stmt.AddAssignStmt(resReg, resId);
      stmt.AddPlusStmt(resReg, lhsReg, rhsReg);
      stmt.AddAssignStmt(resId, resReg);
      return stmt;
    }

    stmt.AddPlusStmt(resReg, lhsReg, rhsReg);
    return stmt;
  }

  /**
   * f0 -> Identifier()
   * f1 -> "="
   * f2 -> Identifier()
   * f3 -> "-"
   * f4 -> Identifier()
   */
  public SparrowVCode visit(Subtract n, FunctionSymbol context) {
    String resId = n.f0.accept(idVisitor);
    String resReg = context.Register(resId);
    String lhsId = n.f2.accept(idVisitor);
    String lhsReg = context.Register(lhsId);
    String rhsId = n.f4.accept(idVisitor);
    String rhsReg = context.Register(rhsId);
    SparrowVCode stmt = new SparrowVCode();
    if (lhsReg == null) {
      lhsReg = "s9";
      stmt.AddAssignStmt(lhsReg, lhsId);
    }
    if (rhsReg == null) {
      rhsReg = "s10";
      stmt.AddAssignStmt(rhsReg, rhsId);
    }
    if (resReg == null) {
      resReg = "s11";
      stmt.AddAssignStmt(resReg, resId);
      stmt.AddMinusStmt(resReg, lhsReg, rhsReg);
      stmt.AddAssignStmt(resId, resReg);
      return stmt;
    }

    stmt.AddMinusStmt(resReg, lhsReg, rhsReg);
    return stmt;
  }

  /**
   * f0 -> Identifier()
   * f1 -> "="
   * f2 -> Identifier()
   * f3 -> "*"
   * f4 -> Identifier()
   */
  public SparrowVCode visit(Multiply n, FunctionSymbol context) {
    String resId = n.f0.accept(idVisitor);
    String resReg = context.Register(resId);
    String lhsId = n.f2.accept(idVisitor);
    String lhsReg = context.Register(lhsId);
    String rhsId = n.f4.accept(idVisitor);
    String rhsReg = context.Register(rhsId);
    SparrowVCode stmt = new SparrowVCode();
    if (lhsReg == null) {
      lhsReg = "s9";
      stmt.AddAssignStmt(lhsReg, lhsId);
    }
    if (rhsReg == null) {
      rhsReg = "s10";
      stmt.AddAssignStmt(rhsReg, rhsId);
    }
    if (resReg == null) {
      resReg = "s11";
      stmt.AddAssignStmt(resReg, resId);
      stmt.AddMultiplyStmt(resReg, lhsReg, rhsReg);
      stmt.AddAssignStmt(resId, resReg);
      return stmt;
    }

    stmt.AddMultiplyStmt(resReg, lhsReg, rhsReg);
    return stmt;
  }

  /**
   * f0 -> Identifier()
   * f1 -> "="
   * f2 -> Identifier()
   * f3 -> "<"
   * f4 -> Identifier()
   */
  public SparrowVCode visit(LessThan n, FunctionSymbol context) {
    String resId = n.f0.accept(idVisitor);
    String resReg = context.Register(resId);
    String lhsId = n.f2.accept(idVisitor);
    String lhsReg = context.Register(lhsId);
    String rhsId = n.f4.accept(idVisitor);
    String rhsReg = context.Register(rhsId);
    SparrowVCode stmt = new SparrowVCode();
    if (lhsReg == null) {
      lhsReg = "s9";
      stmt.AddAssignStmt(lhsReg, lhsId);
    }
    if (rhsReg == null) {
      rhsReg = "s10";
      stmt.AddAssignStmt(rhsReg, rhsId);
    }
    if (resReg == null) {
      resReg = "s11";
      stmt.AddAssignStmt(resReg, resId);
      stmt.AddCompareStmt(resReg, lhsReg, rhsReg);
      stmt.AddAssignStmt(resId, resReg);
      return stmt;
    }

    stmt.AddCompareStmt(resReg, lhsReg, rhsReg);
    return stmt;
  }

  /**
   *
   * f0 -> Identifier()
   * f1 -> "="
   * f2 -> "["
   * f3 -> Identifier()
   * f4 -> "+"
   * f5 -> IntegerLiteral()
   * f6 -> "]"
   */
  public SparrowVCode visit(Load n, FunctionSymbol context) {
    String resId = n.f0.accept(idVisitor);
    String resReg = context.Register(resId);
    String heapId = n.f3.accept(idVisitor);
    String heapReg = context.Register(heapId);
    Integer offset = Integer.parseInt(n.f5.accept(idVisitor));
    SparrowVCode stmt = new SparrowVCode();
    if (heapReg == null) {
      heapReg = "s10";
      stmt.AddAssignStmt(heapReg, heapId);
    }
    if (resReg == null) {
      resReg = "s9";
      stmt.AddAssignStmt(resReg, resId);
      stmt.AddLoadStmt(resReg, heapReg, offset);
      stmt.AddAssignStmt(resId, resReg);
      return stmt;
    }
    stmt.AddLoadStmt(resReg, heapReg, offset);
    return stmt;
  }

  /**
   * f0 -> "["
   * f1 -> Identifier()
   * f2 -> "+"
   * f3 -> IntegerLiteral()
   * f4 -> "]"
   * f5 -> "="
   * f6 -> Identifier()
   */
  public SparrowVCode visit(Store n, FunctionSymbol context) {
    String heapId = n.f1.accept(idVisitor);
    String heapReg = context.Register(heapId);
    Integer offset = Integer.parseInt(n.f3.accept(idVisitor));
    String valId = n.f6.accept(idVisitor);
    String valReg = context.Register(valId);
    SparrowVCode stmt = new SparrowVCode();
    if (valReg == null) {
      valReg = "s9";
      stmt.AddAssignStmt(valReg, valId);
    }
    if (heapReg == null) {
      heapReg = "s10";
      stmt.AddAssignStmt(heapReg, heapId);
    }

    stmt.AddStoreStmt(heapReg, offset, valReg);
    return stmt;
  }

  /**
   * f0 -> Identifier()
   * f1 -> "="
   * f2 -> Identifier()
   */
  public SparrowVCode visit(Move n, FunctionSymbol context) {
    String resId = n.f0.accept(idVisitor);
    String resReg = context.Register(resId);
    String valId = n.f2.accept(idVisitor);
    String valReg = context.Register(valId);
    SparrowVCode stmt = new SparrowVCode();
    if (valReg == null) {
      valReg = "s9";
      stmt.AddAssignStmt(valReg, valId);
    }
    if (resReg == null) {
      resReg = "s10";
      stmt.AddAssignStmt(resReg, resId);
      stmt.AddAssignStmt(resReg, valReg);
      stmt.AddAssignStmt(resId, resReg);
    }

    stmt.AddAssignStmt(resReg, valReg);
    return stmt;
  }

  /**
   * f0 -> Identifier()
   * f1 -> "="
   * f2 -> "alloc"
   * f3 -> "("
   * f4 -> Identifier()
   * f5 -> ")"
   */
  public SparrowVCode visit(Alloc n, FunctionSymbol context) {
    String resId = n.f0.accept(idVisitor);
    String resReg = context.Register(resId);
    String valId = n.f4.accept(idVisitor);
    String valReg = context.Register(valId);
    SparrowVCode stmt = new SparrowVCode();
    if (valReg == null) {
      valReg = "s9";
      stmt.AddAssignStmt(valReg, valId);
    }
    if (resReg == null) {
      resReg = "s10";
      stmt.AddAssignStmt(resReg, resId);
      stmt.AddAllocStmt(resReg, valReg);
      stmt.AddAllocStmt(resId, resReg);
    }
    stmt.AddAllocStmt(resReg, valReg);
    return stmt;
  }

  /**
   * f0 -> "print"
   * f1 -> "("
   * f2 -> Identifier()
   * f3 -> ")"
   */
  public SparrowVCode visit(Print n, FunctionSymbol context) {
    String regId = n.f2.accept(idVisitor);
    String reg = context.Register(regId);
    SparrowVCode stmt = new SparrowVCode();
    if (reg == null) {
      reg = "s9";
      stmt.AddAssignStmt(reg, regId);
    }
    stmt.AddPrintStmt(reg);
    return stmt;
  }

  /**
   * f0 -> "error"
   * f1 -> "("
   * f2 -> StringLiteral()
   * f3 -> ")"
   */
  public SparrowVCode visit(ErrorMessage n, FunctionSymbol context) {
    SparrowVCode stmt = new SparrowVCode();
    stmt.AddErrorStmt(n.f2.accept(idVisitor));
    return stmt;
  }

  /**
   * f0 -> "goto"
   * f1 -> Label()
   */
  public SparrowVCode visit(Goto n, FunctionSymbol context) {
    SparrowVCode stmt = new SparrowVCode();
    stmt.AddGotoStmt(n.f1.accept(idVisitor));
    return stmt;
  }

  /**
   * f0 -> "if0"
   * f1 -> Identifier()
   * f2 -> "goto"
   * f3 -> Label()
   */
  public SparrowVCode visit(IfGoto n, FunctionSymbol context) {
    String regId = n.f1.accept(idVisitor);
    String reg = context.Register(regId);
    SparrowVCode stmt = new SparrowVCode();
    if (reg == null) {
      reg = "s9";
      stmt.AddAssignStmt(reg, regId);
    }

    stmt.AddIfStmt(reg, n.f3.accept(idVisitor));
    return stmt;
  }

  /**
   * f0 -> Identifier()
   * f1 -> "="
   * f2 -> "call"
   * f3 -> Identifier()
   * f4 -> "("
   * f5 -> ( Identifier() )*
   * f6 -> ")"
   */
  public SparrowVCode visit(Call n, FunctionSymbol context) {
    String resReg = context.Register(n.f0.accept(idVisitor));
    String funcReg = context.Register(n.f3.accept(idVisitor));
    SparrowVCode stmt = new SparrowVCode();
    List<String> stackSaves = new LinkedList<>();
    SparrowVCode paramRegs = n.f5.accept(this, context);
    LinkedList<String> params = new LinkedList<>();
    if (paramRegs != null) {
      stackSaves = setStackSaves(context);
      for (String reg : stackSaves) {
        stmt.AddAssignStmt(reg + "_stack", reg);
      }

      LinkedList<String> regParams = paramRegs.Params();
      int i = 2;
      while (!regParams.isEmpty()) {
        if (i == 6) {
          break;
        }
        String param = regParams.pop();
        stmt.AddAssignStmt("a" + i++, param);
        params.push(context.VariableInRegister(param));
      }
    }

    stmt.AddCallStmt(resReg, funcReg, params);
    for (String reg : stackSaves) {
      stmt.AddAssignStmt(reg, reg + "_stack");
    }

    return stmt;
  }

  /**
   * f0 -> <IDENTIFIER>
   */
  public SparrowVCode visit(Identifier n, FunctionSymbol context) {
    String reg = context.Register(n.f0.tokenImage);
    if (reg == null) {
      reg = n.f0.tokenImage;
    }
    SparrowVCode param = new SparrowVCode();
    param.AddParam(reg);

    return param;
  }

  public List<String> setStackSaves(FunctionSymbol context) {
    Map<String, String> oldArgAssignments = context.ArgRegisterAssignments();
    List<String> stackSaves = new LinkedList<>();
    for (Map.Entry<String, String> arg : oldArgAssignments.entrySet()) {
      Integer lastUse = context.LastUse(arg.getKey());
      if (lastUse < lineCounter.LineNumber()) {
        stackSaves.add(arg.getValue());
      }
    }

    System.out.println("In stacksaves: " + stackSaves.toString());
    return stackSaves;
  }
}
