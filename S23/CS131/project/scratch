    def p_input(self, tokens = None, class_name = None, method_name = None):
        for i, token in enumerate(tokens):
            # recurse if nested
            if type(token) is list:
                self.p_input(token, class_name, method_name)

            # class
            if token == self.CLASS_DEF:
                class_name = tokens[i + 1]
                self.classes[class_name] = Class(class_name)

            # method
            elif token == self.METHOD_DEF:
                method_name = tokens[i + 1]
                method_args = tokens[i + 2]
                self.classes[class_name].add_method(method_name, method_args)

            # field
            elif token == self.FIELD_DEF:
                field_name = tokens[i + 1]
                field_value = tokens[i + 2]
                self.classes[class_name].add_field(field_name, field_value)

            # begin
            elif token == self.BEGIN_DEF:
                # for each statement in the begin block, recurse to parse the statement
                for statement in tokens[i + 1]:
                    self.p_input(statement, class_name, method_name)

            # null
            elif token == self.SET_DEF:
                self.classes[class_name].methods[method_name].add_variable(tokens[i + 1], tokens[ i + 2])

            # null
            elif token == self.NEW_DEF:
                pass

            # null
            elif token == self.IF_DEF:
                pass

            # null
            elif token == self.WHILE_DEF:
                pass

            # print statement
            elif token == self.PRINT_DEF:
                self.classes[class_name].methods[method_name].add_statement((tokens[i], tokens[i + 1]))